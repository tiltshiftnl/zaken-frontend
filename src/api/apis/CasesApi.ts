// tslint:disable
/**
 * Zaken Backend Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from "rxjs"
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from "../runtime"
import {
    Case,
    CaseTimeline,
    Debriefing,
    FineList,
    PaginatedCaseList,
    PatchedCase
} from "../models"

export type CasesCreateRequest = {
    _case: Case
}

export type CasesDebriefingsRetrieveRequest = {
    id: number
}

export type CasesDestroyRequest = {
    id: number
}

export type CasesFinesRetrieveRequest = {
    id: number
}

export type CasesListRequest = {
    page?: number
    stateDate?: string
}

export type CasesPartialUpdateRequest = {
    id: number
    patchedCase?: PatchedCase
}

export type CasesRetrieveRequest = {
    id: number
}

export type CasesTimelineRetrieveRequest = {
    id: number
}

export type CasesUpdateRequest = {
    id: number
    _case: Case
}

/**
 * no description
 */
export class CasesApi extends BaseAPI {
    /**
     */
    casesCreate = ({ _case }: CasesCreateRequest): Observable<Case> => {
        throwIfNullOrUndefined(_case, "casesCreate")

        const headers: HttpHeaders = {
            "Content-Type": "application/json",
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<Case>({
            path: "/api/v1/cases/",
            method: "POST",
            headers,
            body: _case
        })
    };

    /**
     */
    casesDebriefingsRetrieve = ({ id }: CasesDebriefingsRetrieveRequest): Observable<Debriefing> => {
        throwIfNullOrUndefined(id, "casesDebriefingsRetrieve")

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<Debriefing>({
            path: "/api/v1/cases/{id}/debriefings/".replace("{id}", encodeURI(id)),
            method: "GET",
            headers
        })
    };

    /**
     */
    casesDestroy = ({ id }: CasesDestroyRequest): Observable<void> => {
        throwIfNullOrUndefined(id, "casesDestroy")

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<void>({
            path: "/api/v1/cases/{id}/".replace("{id}", encodeURI(id)),
            method: "DELETE",
            headers
        })
    };

    /**
     * Retrieves states for a case which allow fines, and retrieve the corresponding fines
     */
    casesFinesRetrieve = ({ id }: CasesFinesRetrieveRequest): Observable<FineList> => {
        throwIfNullOrUndefined(id, "casesFinesRetrieve")

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<FineList>({
            path: "/api/v1/cases/{id}/fines/".replace("{id}", encodeURI(id)),
            method: "GET",
            headers
        })
    };

    /**
     */
    casesList = ({ page, stateDate }: CasesListRequest): Observable<PaginatedCaseList> => {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        const query: HttpQuery = {}

        if (page != null) { query["page"] = page }
        if (stateDate != null) { query["state_date"] = stateDate }

        return this.request<PaginatedCaseList>({
            path: "/api/v1/cases/",
            method: "GET",
            headers,
            query
        })
    };

    /**
     */
    casesPartialUpdate = ({ id, patchedCase }: CasesPartialUpdateRequest): Observable<Case> => {
        throwIfNullOrUndefined(id, "casesPartialUpdate")

        const headers: HttpHeaders = {
            "Content-Type": "application/json",
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<Case>({
            path: "/api/v1/cases/{id}/".replace("{id}", encodeURI(id)),
            method: "PATCH",
            headers,
            body: patchedCase
        })
    };

    /**
     */
    casesRetrieve = ({ id }: CasesRetrieveRequest): Observable<Case> => {
        throwIfNullOrUndefined(id, "casesRetrieve")

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<Case>({
            path: "/api/v1/cases/{id}/".replace("{id}", encodeURI(id)),
            method: "GET",
            headers
        })
    };

    /**
     */
    casesTimelineRetrieve = ({ id }: CasesTimelineRetrieveRequest): Observable<CaseTimeline> => {
        throwIfNullOrUndefined(id, "casesTimelineRetrieve")

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<CaseTimeline>({
            path: "/api/v1/cases/{id}/timeline/".replace("{id}", encodeURI(id)),
            method: "GET",
            headers
        })
    };

    /**
     */
    casesUpdate = ({ id, _case }: CasesUpdateRequest): Observable<Case> => {
        throwIfNullOrUndefined(id, "casesUpdate")
        throwIfNullOrUndefined(_case, "casesUpdate")

        const headers: HttpHeaders = {
            "Content-Type": "application/json",
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<Case>({
            path: "/api/v1/cases/{id}/".replace("{id}", encodeURI(id)),
            method: "PUT",
            headers,
            body: _case
        })
    };
}
