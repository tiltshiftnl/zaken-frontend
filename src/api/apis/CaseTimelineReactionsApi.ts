// tslint:disable
/**
 * Zaken Backend Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from "rxjs"
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from "../runtime"
import {
    CaseTimelineReaction,
    PaginatedCaseTimelineReactionList,
    PatchedCaseTimelineReaction
} from "../models"

export type CaseTimelineReactionsCreateRequest = {
    caseTimelineReaction: CaseTimelineReaction
}

export type CaseTimelineReactionsDestroyRequest = {
    id: number
}

export type CaseTimelineReactionsListRequest = {
    page?: number
}

export type CaseTimelineReactionsPartialUpdateRequest = {
    id: number
    patchedCaseTimelineReaction?: PatchedCaseTimelineReaction
}

export type CaseTimelineReactionsRetrieveRequest = {
    id: number
}

export type CaseTimelineReactionsUpdateRequest = {
    id: number
    caseTimelineReaction: CaseTimelineReaction
}

/**
 * no description
 */
export class CaseTimelineReactionsApi extends BaseAPI {
    /**
     */
    caseTimelineReactionsCreate = ({ caseTimelineReaction }: CaseTimelineReactionsCreateRequest): Observable<CaseTimelineReaction> => {
        throwIfNullOrUndefined(caseTimelineReaction, "caseTimelineReactionsCreate")

        const headers: HttpHeaders = {
            "Content-Type": "application/json",
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<CaseTimelineReaction>({
            path: "/api/v1/case-timeline-reactions/",
            method: "POST",
            headers,
            body: caseTimelineReaction
        })
    };

    /**
     */
    caseTimelineReactionsDestroy = ({ id }: CaseTimelineReactionsDestroyRequest): Observable<void> => {
        throwIfNullOrUndefined(id, "caseTimelineReactionsDestroy")

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<void>({
            path: "/api/v1/case-timeline-reactions/{id}/".replace("{id}", encodeURI(id)),
            method: "DELETE",
            headers
        })
    };

    /**
     */
    caseTimelineReactionsList = ({ page }: CaseTimelineReactionsListRequest): Observable<PaginatedCaseTimelineReactionList> => {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        const query: HttpQuery = {}

        if (page != null) { query["page"] = page }

        return this.request<PaginatedCaseTimelineReactionList>({
            path: "/api/v1/case-timeline-reactions/",
            method: "GET",
            headers,
            query
        })
    };

    /**
     */
    caseTimelineReactionsPartialUpdate = ({ id, patchedCaseTimelineReaction }: CaseTimelineReactionsPartialUpdateRequest): Observable<CaseTimelineReaction> => {
        throwIfNullOrUndefined(id, "caseTimelineReactionsPartialUpdate")

        const headers: HttpHeaders = {
            "Content-Type": "application/json",
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<CaseTimelineReaction>({
            path: "/api/v1/case-timeline-reactions/{id}/".replace("{id}", encodeURI(id)),
            method: "PATCH",
            headers,
            body: patchedCaseTimelineReaction
        })
    };

    /**
     */
    caseTimelineReactionsRetrieve = ({ id }: CaseTimelineReactionsRetrieveRequest): Observable<CaseTimelineReaction> => {
        throwIfNullOrUndefined(id, "caseTimelineReactionsRetrieve")

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<CaseTimelineReaction>({
            path: "/api/v1/case-timeline-reactions/{id}/".replace("{id}", encodeURI(id)),
            method: "GET",
            headers
        })
    };

    /**
     */
    caseTimelineReactionsUpdate = ({ id, caseTimelineReaction }: CaseTimelineReactionsUpdateRequest): Observable<CaseTimelineReaction> => {
        throwIfNullOrUndefined(id, "caseTimelineReactionsUpdate")
        throwIfNullOrUndefined(caseTimelineReaction, "caseTimelineReactionsUpdate")

        const headers: HttpHeaders = {
            "Content-Type": "application/json",
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<CaseTimelineReaction>({
            path: "/api/v1/case-timeline-reactions/{id}/".replace("{id}", encodeURI(id)),
            method: "PUT",
            headers,
            body: caseTimelineReaction
        })
    };
}
