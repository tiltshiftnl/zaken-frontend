// tslint:disable
/**
 * Zaken Backend Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from "rxjs"
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from "../runtime"
import {
    DecosPermit,
    PermitCheckmark,
    Residents
} from "../models"

export type AddressesPermitsCheckmarksRetrieveRequest = {
    bagId: string
}

export type AddressesPermitsListRequest = {
    bagId: string
}

export type AddressesResidentsRetrieveRequest = {
    bagId: string
}

/**
 * no description
 */
export class AddressesApi extends BaseAPI {
    /**
     * Get permit checkmarks based on bag id
     */
    addressesPermitsCheckmarksRetrieve = ({ bagId }: AddressesPermitsCheckmarksRetrieveRequest): Observable<PermitCheckmark> => {
        throwIfNullOrUndefined(bagId, "addressesPermitsCheckmarksRetrieve")

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<PermitCheckmark>({
            path: "/api/v1/addresses/{bag_id}/permits/checkmarks/".replace("{bag_id}", encodeURI(bagId)),
            method: "GET",
            headers
        })
    };

    /**
     * Get permit details based on bag id
     */
    addressesPermitsList = ({ bagId }: AddressesPermitsListRequest): Observable<Array<DecosPermit>> => {
        throwIfNullOrUndefined(bagId, "addressesPermitsList")

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<Array<DecosPermit>>({
            path: "/api/v1/addresses/{bag_id}/permits/".replace("{bag_id}", encodeURI(bagId)),
            method: "GET",
            headers
        })
    };

    /**
     */
    addressesResidentsRetrieve = ({ bagId }: AddressesResidentsRetrieveRequest): Observable<Residents> => {
        throwIfNullOrUndefined(bagId, "addressesResidentsRetrieve")

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<Residents>({
            path: "/api/v1/addresses/{bag_id}/residents/".replace("{bag_id}", encodeURI(bagId)),
            method: "GET",
            headers
        })
    };
}
