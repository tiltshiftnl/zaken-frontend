// tslint:disable
/**
 * Zaken Backend Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from "rxjs"
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from "../runtime"
import {
    CaseTimeline,
    PaginatedCaseTimelineList,
    PatchedCaseTimeline
} from "../models"

export type CaseTimelinesCreateRequest = {
    caseTimeline: CaseTimeline
}

export type CaseTimelinesDestroyRequest = {
    id: number
}

export type CaseTimelinesListRequest = {
    caseIdentification?: string
    page?: number
}

export type CaseTimelinesPartialUpdateRequest = {
    id: number
    patchedCaseTimeline?: PatchedCaseTimeline
}

export type CaseTimelinesRetrieveRequest = {
    id: number
}

export type CaseTimelinesUpdateRequest = {
    id: number
    caseTimeline: CaseTimeline
}

/**
 * no description
 */
export class CaseTimelinesApi extends BaseAPI {
    /**
     */
    caseTimelinesCreate = ({ caseTimeline }: CaseTimelinesCreateRequest): Observable<CaseTimeline> => {
        throwIfNullOrUndefined(caseTimeline, "caseTimelinesCreate")

        const headers: HttpHeaders = {
            "Content-Type": "application/json",
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<CaseTimeline>({
            path: "/api/v1/case-timelines/",
            method: "POST",
            headers,
            body: caseTimeline
        })
    };

    /**
     */
    caseTimelinesDestroy = ({ id }: CaseTimelinesDestroyRequest): Observable<void> => {
        throwIfNullOrUndefined(id, "caseTimelinesDestroy")

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<void>({
            path: "/api/v1/case-timelines/{id}/".replace("{id}", encodeURI(id)),
            method: "DELETE",
            headers
        })
    };

    /**
     */
    caseTimelinesList = ({ caseIdentification, page }: CaseTimelinesListRequest): Observable<PaginatedCaseTimelineList> => {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        const query: HttpQuery = {}

        if (caseIdentification != null) { query["case__identification"] = caseIdentification }
        if (page != null) { query["page"] = page }

        return this.request<PaginatedCaseTimelineList>({
            path: "/api/v1/case-timelines/",
            method: "GET",
            headers,
            query
        })
    };

    /**
     */
    caseTimelinesPartialUpdate = ({ id, patchedCaseTimeline }: CaseTimelinesPartialUpdateRequest): Observable<CaseTimeline> => {
        throwIfNullOrUndefined(id, "caseTimelinesPartialUpdate")

        const headers: HttpHeaders = {
            "Content-Type": "application/json",
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<CaseTimeline>({
            path: "/api/v1/case-timelines/{id}/".replace("{id}", encodeURI(id)),
            method: "PATCH",
            headers,
            body: patchedCaseTimeline
        })
    };

    /**
     */
    caseTimelinesRetrieve = ({ id }: CaseTimelinesRetrieveRequest): Observable<CaseTimeline> => {
        throwIfNullOrUndefined(id, "caseTimelinesRetrieve")

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<CaseTimeline>({
            path: "/api/v1/case-timelines/{id}/".replace("{id}", encodeURI(id)),
            method: "GET",
            headers
        })
    };

    /**
     */
    caseTimelinesUpdate = ({ id, caseTimeline }: CaseTimelinesUpdateRequest): Observable<CaseTimeline> => {
        throwIfNullOrUndefined(id, "caseTimelinesUpdate")
        throwIfNullOrUndefined(caseTimeline, "caseTimelinesUpdate")

        const headers: HttpHeaders = {
            "Content-Type": "application/json",
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<CaseTimeline>({
            path: "/api/v1/case-timelines/{id}/".replace("{id}", encodeURI(id)),
            method: "PUT",
            headers,
            body: caseTimeline
        })
    };
}
