// tslint:disable
/**
 * Zaken Backend Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from "rxjs"
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from "../runtime"
import {
    Debriefing,
    DebriefingCreate,
    PatchedDebriefing
} from "../models"

export type DebriefingsCreateRequest = {
    debriefingCreate: DebriefingCreate
}

export type DebriefingsDestroyRequest = {
    id: number
}

export type DebriefingsPartialUpdateRequest = {
    id: number
    patchedDebriefing?: PatchedDebriefing
}

export type DebriefingsRetrieveRequest = {
    id: number
}

export type DebriefingsUpdateRequest = {
    id: number
    debriefing: Debriefing
}

/**
 * no description
 */
export class DebriefingsApi extends BaseAPI {
    /**
     * The Debriefing Author is automatically linked to the currently authenticated user
     */
    debriefingsCreate = ({ debriefingCreate }: DebriefingsCreateRequest): Observable<DebriefingCreate> => {
        throwIfNullOrUndefined(debriefingCreate, "debriefingsCreate")

        const headers: HttpHeaders = {
            "Content-Type": "application/json",
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<DebriefingCreate>({
            path: "/api/v1/debriefings/",
            method: "POST",
            headers,
            body: debriefingCreate
        })
    };

    /**
     */
    debriefingsDestroy = ({ id }: DebriefingsDestroyRequest): Observable<void> => {
        throwIfNullOrUndefined(id, "debriefingsDestroy")

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<void>({
            path: "/api/v1/debriefings/{id}/".replace("{id}", encodeURI(id)),
            method: "DELETE",
            headers
        })
    };

    /**
     */
    debriefingsPartialUpdate = ({ id, patchedDebriefing }: DebriefingsPartialUpdateRequest): Observable<Debriefing> => {
        throwIfNullOrUndefined(id, "debriefingsPartialUpdate")

        const headers: HttpHeaders = {
            "Content-Type": "application/json",
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<Debriefing>({
            path: "/api/v1/debriefings/{id}/".replace("{id}", encodeURI(id)),
            method: "PATCH",
            headers,
            body: patchedDebriefing
        })
    };

    /**
     */
    debriefingsRetrieve = ({ id }: DebriefingsRetrieveRequest): Observable<Debriefing> => {
        throwIfNullOrUndefined(id, "debriefingsRetrieve")

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<Debriefing>({
            path: "/api/v1/debriefings/{id}/".replace("{id}", encodeURI(id)),
            method: "GET",
            headers
        })
    };

    /**
     */
    debriefingsUpdate = ({ id, debriefing }: DebriefingsUpdateRequest): Observable<Debriefing> => {
        throwIfNullOrUndefined(id, "debriefingsUpdate")
        throwIfNullOrUndefined(debriefing, "debriefingsUpdate")

        const headers: HttpHeaders = {
            "Content-Type": "application/json",
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${ btoa(this.configuration.username + ":" + this.configuration.password) }` } : undefined)
        }

        return this.request<Debriefing>({
            path: "/api/v1/debriefings/{id}/".replace("{id}", encodeURI(id)),
            method: "PUT",
            headers,
            body: debriefing
        })
    };
}
